{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Divider, Grid, Header, Icon, Segment } from 'semantic-ui-react';\n\nvar _require = require('./../wills'),\n    wills = _require.wills;\n\nimport Layout from '../../components/layouts/Layout2';\nimport { Link } from './../../routes';\n\nvar EtherWill =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EtherWill, _Component);\n\n  function EtherWill() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EtherWill);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EtherWill)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      willAddress: '',\n      loading: true\n    });\n\n    return _this;\n  }\n\n  _createClass(EtherWill, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var will, willAddress;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(wills());\n\n            case 2:\n              will = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(will.methods.getTestor(window.account).call({\n                from: window.account\n              }));\n\n            case 5:\n              willAddress = _context.sent;\n              this.setState({\n                willAddress: willAddress\n              });\n              this.setState({\n                loading: false\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"renderEtherWill\",\n    value: function renderEtherWill() {\n      var a = this.state.willAddress;\n\n      if (a !== '0x0000000000000000000000000000000000000000') {\n        //if the will is created then redirect to a will page\n        return __jsx(\"div\", {\n          style: {\n            marginTop: 'auto'\n          }\n        }, __jsx(Segment, {\n          placeholder: true,\n          style: {\n            marginTop: 'auto',\n            backgroundColor: 'black'\n          }\n        }, __jsx(Grid, {\n          columns: 3,\n          stackable: true,\n          textAlign: \"center\"\n        }, __jsx(Grid.Row, {\n          verticalAlign: \"middle\"\n        }, __jsx(Grid.Column, null, __jsx(Header, {\n          icon: true,\n          style: {\n            color: 'white'\n          }\n        }, __jsx(Icon, {\n          name: \"search\"\n        }), \"Your Role\"), __jsx(\"div\", null, __jsx(Link, {\n          route: \"/\".concat(this.props.add, \"/role\")\n        }, __jsx(\"a\", null, __jsx(Button, {\n          primary: true\n        }, \"Your Role\"))))), __jsx(Grid.Column, null, __jsx(Header, {\n          icon: true,\n          style: {\n            color: 'white'\n          }\n        }, __jsx(Icon, {\n          name: \"arrow circle right\"\n        }), \"Go to Your Will\"), __jsx(\"div\", null, __jsx(Link, {\n          route: \"/will/\".concat(a)\n        }, __jsx(\"a\", null, __jsx(Button, {\n          primary: true\n        }, \"Go!\"))))), __jsx(Grid.Column, null, __jsx(Header, {\n          icon: true,\n          style: {\n            color: 'white'\n          }\n        }, __jsx(Icon, {\n          name: \"zip\"\n        }), \"Destroy Your Will\"), __jsx(\"div\", null, __jsx(Link, {\n          route: \"/\".concat(this.props.add, \"/selfdestruct\")\n        }, __jsx(\"a\", null, __jsx(Button, {\n          \"class\": \"negative ui button\"\n        }, \"Destruct Button!\")))))))));\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            marginTop: 'auto'\n          }\n        }, __jsx(Segment, {\n          placeholder: true,\n          style: {\n            marginTop: 'auto',\n            backgroundColor: 'black'\n          }\n        }, __jsx(Grid, {\n          columns: 2,\n          stackable: true,\n          textAlign: \"center\"\n        }, __jsx(Divider, {\n          vertical: true,\n          style: {\n            color: 'white'\n          }\n        }, \"Or\"), __jsx(Grid.Row, {\n          verticalAlign: \"middle\"\n        }, __jsx(Grid.Column, null, __jsx(Header, {\n          icon: true,\n          style: {\n            color: 'white'\n          }\n        }, __jsx(Icon, {\n          name: \"search\"\n        }), \"Your Role\"), __jsx(\"div\", null, __jsx(Link, {\n          route: \"/\".concat(this.props.add, \"/role\")\n        }, __jsx(\"a\", null, __jsx(Button, {\n          primary: true\n        }, \"Your Role\"))))), __jsx(Grid.Column, null, __jsx(Header, {\n          icon: true,\n          style: {\n            color: 'white'\n          }\n        }, __jsx(Icon, {\n          name: \"plus\"\n        }), \"Create A New Will\"), __jsx(\"div\", null, __jsx(Link, {\n          route: \"/\".concat(this.props.add, \"/new\")\n        }, __jsx(\"a\", null, __jsx(Button, {\n          primary: true\n        }, \"Create\")))))))));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading === false) {\n        return __jsx(\"div\", {\n          style: {\n            backgroundColor: 'black',\n            height: '1000px'\n          }\n        }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n          as: \"h1\",\n          icon: true,\n          textAlign: \"center\"\n        }, __jsx(Icon, {\n          name: \"file code\",\n          circular: true,\n          style: {\n            color: 'white'\n          }\n        }), __jsx(Header.Content, {\n          style: {\n            color: 'white'\n          }\n        }, \"EtherWill\")), __jsx(\"p\", {\n          style: {\n            fontSize: '2em',\n            color: 'white',\n            marginLeft: '9.3em',\n            marginRight: '4em',\n            marginTop: '4em'\n          },\n          textAlign: \"center\"\n        }, \"A New Way To Secure Future Of Your Loved Ones!\")), __jsx(\"div\", {\n          style: {\n            marginTop: '125px'\n          }\n        }, this.renderEtherWill())));\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            backgroundColor: 'black',\n            height: '1000px'\n          }\n        }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n          as: \"h1\",\n          icon: true,\n          textAlign: \"center\"\n        }, __jsx(Header.Content, {\n          style: {\n            color: 'white'\n          }\n        }, \"LOADING..\")))));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", {\n                add: props.query.address\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return EtherWill;\n}(Component);\n\nexport default EtherWill;","map":{"version":3,"sources":["C:/Users/nitin/Documents/github/EtherWills/pages/will/home.js"],"names":["React","Component","Button","Divider","Grid","Header","Icon","Segment","require","wills","Layout","Link","EtherWill","willAddress","loading","will","methods","getTestor","window","account","call","from","setState","a","state","marginTop","backgroundColor","color","props","add","height","fontSize","marginLeft","marginRight","renderEtherWill","query","address"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Divider, Grid, Header, Icon, Segment } from 'semantic-ui-react';\r\nconst { wills } = require('./../wills');\r\nimport Layout from '../../components/layouts/Layout2';\r\nimport { Link } from './../../routes';\r\n\r\nclass EtherWill extends Component {\r\n\tstatic async getInitialProps(props) {\r\n\t\treturn { add: props.query.address }\r\n\t}\r\n\tstate = {\r\n\t\twillAddress: '',\r\n\t\tloading: true\r\n\t};\r\n\tasync componentDidMount() {\r\n\t\tconst will = await wills();\r\n\t\tconst willAddress = await will.methods.getTestor(window.account).call({ from: window.account });\r\n\t\tthis.setState({ willAddress });\r\n\t\tthis.setState({loading: false})\r\n\t}\r\n\r\n\trenderEtherWill() {\r\n\t\tlet a = this.state.willAddress;\r\n\t\tif (a !== '0x0000000000000000000000000000000000000000') {\r\n\t\t\t//if the will is created then redirect to a will page\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ marginTop: 'auto' }}>\r\n\t\t\t\t\t<Segment placeholder style={{ marginTop: 'auto', backgroundColor: 'black' }}>\r\n\t\t\t\t\t\t<Grid columns={3} stackable textAlign=\"center\">\r\n\t\t\t\t\t\t\t<Grid.Row verticalAlign=\"middle\">\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"search\" />\r\n\t\t\t\t\t\t\t\t\t\tYour Role\r\n\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Link route={`/${this.props.add}/role`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button primary>Your Role</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"arrow circle right\" />\r\n\t\t\t\t\t\t\t\t\t\tGo to Your Will\r\n\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Link route={`/will/${a}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button primary>Go!</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"zip\" />\r\n\t\t\t\t\t\t\t\t\t\tDestroy Your Will\r\n\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Link route={`/${this.props.add}/selfdestruct`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button class=\"negative ui button\">Destruct Button!</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ marginTop: 'auto' }}>\r\n\t\t\t\t\t<Segment placeholder style={{ marginTop: 'auto', backgroundColor: 'black' }}>\r\n\t\t\t\t\t\t<Grid columns={2} stackable textAlign=\"center\">\r\n\t\t\t\t\t\t\t<Divider vertical style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Divider>\r\n\r\n\t\t\t\t\t\t\t<Grid.Row verticalAlign=\"middle\">\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"search\" />\r\n\t\t\t\t\t\t\t\t\t\tYour Role\r\n\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Link route={`/${this.props.add}/role`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button primary>Your Role</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"plus\" />\r\n\t\t\t\t\t\t\t\t\t\tCreate A New Will\r\n\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Link route={`/${this.props.add}/new`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button primary>Create</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.loading === false){\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Icon name=\"file code\" circular style={{ color: 'white' }} />\r\n\t\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>EtherWill</Header.Content>\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<p\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: '2em', color: 'white', marginLeft: '9.3em', marginRight: '4em',  marginTop: '4em' }}\r\n\t\t\t\t\t\t\t\ttextAlign=\"center\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tA New Way To Secure Future Of Your Loved Ones!\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style={{ marginTop: '125px' }}>{this.renderEtherWill()}</div>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>LOADING..</Header.Content>\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default EtherWill;\r\n"]},"metadata":{},"sourceType":"module"}