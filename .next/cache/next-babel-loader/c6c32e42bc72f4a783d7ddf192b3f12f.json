{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layouts/Layout2';\nimport { Button, Item, Table, Header } from 'semantic-ui-react';\n\nvar _require = require('../EtherWills'),\n    ethwill = _require.ethwill;\n\nvar _require2 = require('../wills'),\n    wills = _require2.wills;\n\nimport { Link, Router } from '../../routes';\n\nvar YourRole =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(YourRole, _Component);\n\n  function YourRole() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YourRole);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YourRole)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      willAddress: '',\n      addressBenefArray: [],\n      loading: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submit\", function _callee(event) {\n      var address, etherwill, bool, code;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              address = event.target.value;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ethwill(address));\n\n            case 4:\n              etherwill = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(etherwill.methods.checkExecutable().call({\n                from: window.account\n              }));\n\n            case 7:\n              bool = _context.sent;\n\n              if (!(bool == true)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(etherwill.methods.getCode().call({\n                from: window.account\n              }));\n\n            case 11:\n              code = _context.sent;\n              alert(\"Executable code is \".concat(code));\n              _context.next = 16;\n              break;\n\n            case 15:\n              alert('The will is not yet executable');\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"executeWill\", function _callee2(event) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Router.pushRoute(\"/\".concat(window.account, \"/executeWill/\").concat(event.target.value));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"Back\", function _callee3(event) {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault();\n              Router.pushRoute('/' + window.account);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(YourRole, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var will, willAddress, beneficiary_contracts, addressBenefArray, willAddressAsBenef, i, has_selfdestructed;\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(wills());\n\n            case 2:\n              will = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(will.methods.getTestor(window.account).call({\n                from: window.account\n              }));\n\n            case 5:\n              willAddress = _context4.sent;\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(will.methods.numberOfWillsAsBeneficiary().call({\n                from: window.account\n              }));\n\n            case 8:\n              beneficiary_contracts = _context4.sent;\n              addressBenefArray = [];\n              i = 0;\n\n            case 11:\n              if (!(i < beneficiary_contracts)) {\n                _context4.next = 22;\n                break;\n              }\n\n              _context4.next = 14;\n              return _regeneratorRuntime.awrap(will.methods.getBeneficiary(window.account, i).call({\n                from: window.account\n              }));\n\n            case 14:\n              willAddressAsBenef = _context4.sent;\n              _context4.next = 17;\n              return _regeneratorRuntime.awrap(will.methods.getWillExistence(willAddressAsBenef).call({\n                from: window.account\n              }));\n\n            case 17:\n              has_selfdestructed = _context4.sent;\n\n              if (has_selfdestructed === false) {\n                addressBenefArray.push(willAddressAsBenef);\n              }\n\n            case 19:\n              i++;\n              _context4.next = 11;\n              break;\n\n            case 22:\n              console.log(addressBenefArray);\n              this.setState({\n                willAddress: willAddress\n              });\n              this.setState({\n                addressBenefArray: addressBenefArray\n              });\n              this.setState({\n                loading: false\n              });\n\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"renderTestor\",\n    value: function renderTestor() {\n      var a = this.state.willAddress;\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body,\n          Cell = Table.Cell;\n\n      if (a != '0x0000000000000000000000000000000000000000') {\n        var _a = this.state.willAddress;\n        return __jsx(\"div\", null, __jsx(Header, {\n          as: \"h3\",\n          block: true,\n          style: {\n            color: 'white'\n          }\n        }, \"As A Testor\"), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Will Address\"), __jsx(HeaderCell, null, \"Role\"), __jsx(HeaderCell, null, \"Description\"))), __jsx(Body, null, __jsx(Row, null, __jsx(Cell, null, _a), __jsx(Cell, null, \"Testor\"), __jsx(Cell, null, \"For a given will address you are acting as a Testor\")))));\n      } else {\n        return __jsx(\"div\", null, __jsx(Header, {\n          as: \"h3\",\n          block: true,\n          style: {\n            color: 'white'\n          }\n        }, \"As A Testor\"), __jsx(Link, {\n          route: \"/\".concat(window.account, \"/new\")\n        }, __jsx(\"a\", null, __jsx(Button, {\n          primary: true\n        }, \"Create A Will First\"))));\n      }\n    }\n  }, {\n    key: \"renderBeneficiary\",\n    value: function renderBeneficiary() {\n      if (this.state.addressBenefArray.length == 0) {\n        return __jsx(\"div\", {\n          style: {\n            marginTop: '30px'\n          }\n        }, __jsx(Header, {\n          as: \"h3\",\n          block: true\n        }, \"You Are Not A Beneficiary Of Any Will\"));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.loading === false) {\n        var _Header = Table.Header,\n            Row = Table.Row,\n            HeaderCell = Table.HeaderCell,\n            Body = Table.Body,\n            Cell = Table.Cell;\n        return __jsx(\"div\", {\n          style: {\n            backgroundColor: 'black',\n            height: '1000px'\n          }\n        }, __jsx(Layout, null, __jsx(\"h2\", {\n          className: \"ui icon center aligned header\",\n          style: {\n            color: 'white'\n          }\n        }, __jsx(\"i\", {\n          \"aria-hidden\": \"true\",\n          \"class\": \"file code icon\",\n          style: {\n            color: 'white'\n          }\n        }), \"Your Role In Different Wills\"), __jsx(Button, {\n          primary: true,\n          type: \"button\",\n          onClick: this.Back,\n          style: {\n            marginTop: '30px',\n            marginBottom: '15px'\n          }\n        }, \"Back\"), __jsx(\"div\", null, this.renderTestor()), __jsx(\"div\", null, __jsx(_Header, {\n          as: \"h3\",\n          block: true,\n          style: {\n            marginTop: '30px',\n            color: 'white',\n            marginBottom: '30px'\n          }\n        }, \"As A Beneficiary\")), __jsx(\"div\", null, this.renderBeneficiary()), this.state.addressBenefArray.map(function (address) {\n          return __jsx(\"div\", null, __jsx(Table, null, __jsx(_Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Will Address\"), __jsx(HeaderCell, null, \"Role\"), __jsx(HeaderCell, null, \"Description\"))), __jsx(Body, null, __jsx(Row, null, __jsx(Cell, null, address), __jsx(Cell, null, \"Beneficiary\"), __jsx(Cell, null, \"For a given will address you are acting as a Beneficiary\"), __jsx(Cell, null, __jsx(Button, {\n            basic: true,\n            color: \"yellow\",\n            value: address,\n            onClick: _this2.submit\n          }, \"Check Executable\")), __jsx(Cell, null, __jsx(Button, {\n            basic: true,\n            color: \"green\",\n            value: address,\n            onClick: _this2.executeWill\n          }, \"Execute Will\"))))));\n        })));\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            backgroundColor: 'black',\n            height: '1000px'\n          }\n        }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n          as: \"h1\",\n          icon: true,\n          textAlign: \"center\"\n        }, __jsx(Header.Content, {\n          style: {\n            color: 'white'\n          }\n        }, \"LOADING..\")))));\n      }\n    }\n  }]);\n\n  return YourRole;\n}(Component);\n\nexport default YourRole;","map":{"version":3,"sources":["C:/Users/nitin/Documents/github/EtherWills/pages/will/role.js"],"names":["React","Component","Layout","Button","Item","Table","Header","require","ethwill","wills","Link","Router","YourRole","willAddress","addressBenefArray","loading","event","preventDefault","address","target","value","etherwill","methods","checkExecutable","call","from","window","account","bool","getCode","code","alert","pushRoute","will","getTestor","numberOfWillsAsBeneficiary","beneficiary_contracts","i","getBeneficiary","willAddressAsBenef","getWillExistence","has_selfdestructed","push","console","log","setState","a","state","Row","HeaderCell","Body","Cell","color","length","marginTop","backgroundColor","height","Back","marginBottom","renderTestor","renderBeneficiary","map","submit","executeWill"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../components/layouts/Layout2';\r\nimport { Button, Item, Table, Header } from 'semantic-ui-react';\r\nconst { ethwill } = require('../EtherWills');\r\nconst { wills } = require('../wills');\r\nimport { Link, Router } from '../../routes';\r\n\r\nclass YourRole extends Component {\r\n\tstate = {\r\n\t\twillAddress: '',\r\n\t\taddressBenefArray: [],\r\n\t\tloading: true\r\n\t};\r\n\tasync componentDidMount() {\r\n\t\tconst will = await wills();\r\n\r\n\t\tconst willAddress = await will.methods.getTestor(window.account).call({ from: window.account });\r\n\t\tconst beneficiary_contracts = await will.methods.numberOfWillsAsBeneficiary().call({ from: window.account });\r\n\r\n\t\tlet addressBenefArray = [];\r\n\t\tlet willAddressAsBenef;\r\n\t\tfor (let i = 0; i < beneficiary_contracts; i++) {\r\n\t\t\twillAddressAsBenef = await will.methods.getBeneficiary(window.account, i).call({ from: window.account });\r\n\t\t\tlet has_selfdestructed = await will.methods.getWillExistence(willAddressAsBenef).call({ from: window.account });\r\n\t\t\tif(has_selfdestructed===false){\r\n\t\t\t\taddressBenefArray.push(willAddressAsBenef);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tconsole.log(addressBenefArray);\r\n\t\tthis.setState({ willAddress });\r\n\t\tthis.setState({ addressBenefArray });\r\n\t\tthis.setState({ loading: false })\r\n\t}\r\n\tsubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tlet address = event.target.value\r\n\t\tconst etherwill = await ethwill(address);\r\n\t\tlet bool = await etherwill.methods.checkExecutable().call({ from: window.account });\r\n\t\tif (bool == true) {\r\n\t\t\tlet code = await etherwill.methods.getCode().call({ from: window.account });\r\n\t\t\talert(`Executable code is ${code}`);\r\n\t\t} else {\r\n\t\t\talert('The will is not yet executable');\r\n\t\t}\r\n\t};\r\n\r\n\texecuteWill = async (event) => {\r\n\t\tRouter.pushRoute(`/${window.account}/executeWill/${event.target.value}`);\r\n\t};\r\n\r\n\tBack = async event => {\r\n\t\tevent.preventDefault()\r\n\t\tRouter.pushRoute('/'+window.account) \r\n\t}\r\n\r\n\trenderTestor() {\r\n\t\tlet a = this.state.willAddress;\r\n\t\tconst { Header, Row, HeaderCell, Body, Cell } = Table;\r\n\t\tif (a != '0x0000000000000000000000000000000000000000') {\r\n\t\t\tlet a = this.state.willAddress;\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ color: 'white' }}>\r\n\t\t\t\t\t\tAs A Testor\r\n\t\t\t\t\t</Header>\r\n\r\n\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Will Address</HeaderCell>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Role</HeaderCell>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Description</HeaderCell>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t<Body>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Cell>{a}</Cell>\r\n\t\t\t\t\t\t\t\t<Cell>Testor</Cell>\r\n\t\t\t\t\t\t\t\t<Cell>For a given will address you are acting as a Testor</Cell>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Body>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ color: 'white' }}>\r\n\t\t\t\t\t\tAs A Testor\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t<Link route={`/${window.account}/new`}>\r\n\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t<Button primary>Create A Will First</Button>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trenderBeneficiary() {\r\n\t\tif (this.state.addressBenefArray.length == 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ marginTop: '30px' }}>\r\n\t\t\t\t<Header as=\"h3\" block >\r\n\t\t\t\t\tYou Are Not A Beneficiary Of Any Will\r\n\t\t\t\t</Header>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.loading === false){\r\n\t\t\tconst { Header, Row, HeaderCell, Body, Cell } = Table;\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t<Layout>\r\n\t\t\t\t<h2 className=\"ui icon center aligned header\" style={{ color: 'white' }}>\r\n\t\t\t\t\t<i aria-hidden=\"true\" class=\"file code icon\" style={{ color: 'white' }} />\r\n\t\t\t\t\tYour Role In Different Wills\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Button primary type=\"button\" onClick={this.Back} style = {{marginTop: '30px',marginBottom: '15px'}}>\r\n\t\t\t\t\t\t\tBack\r\n\t\t\t\t</Button>\r\n\t\t\t\t<div>{this.renderTestor()}</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ marginTop: '30px', color: 'white' , marginBottom: '30px'}}>\r\n\t\t\t\t\t\tAs A Beneficiary\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>{this.renderBeneficiary()}</div>\r\n\t\t\t\t{this.state.addressBenefArray.map((address) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Will Address</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Role</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Description</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t<Body>\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>{address}</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>Beneficiary</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>For a given will address you are acting as a Beneficiary</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button basic color=\"yellow\" value={address} onClick={this.submit}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tCheck Executable\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button basic color=\"green\" value={address} onClick={this.executeWill}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tExecute Will\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Cell>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t</Body>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Layout>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>LOADING..</Header.Content>\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default YourRole;"]},"metadata":{},"sourceType":"module"}