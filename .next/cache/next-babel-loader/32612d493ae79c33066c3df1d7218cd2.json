{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Grid, Header, Icon, Segment } from 'semantic-ui-react';\nimport Layout from '../components/layouts/Layout';\nimport { Router } from './../routes';\nimport Web3 from 'web3';\nimport Matic from 'maticjs';\nlet t = '';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLoggedin: false,\n      account: null,\n      balance: ''\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      e.preventDefault();\n\n      if (Notification.permission !== 'denied') {\n        Notification.requestPermission().then(async permission => {\n          if (permission === 'granted') {\n            try {\n              const torus = new t({\n                buttonPosition: \"bottom-left\"\n              });\n              await torus.init({\n                buildEnv: \"production\",\n                enableLogging: true,\n                network: {\n                  host: \"https://alpha.ethereum.matic.network/\"\n                },\n                showTorusButton: true,\n                enabledVerifiers: {\n                  facebook: false,\n                  reddit: false,\n                  twitch: false,\n                  discord: false\n                }\n              });\n              await torus.login();\n              const web3 = new Web3(torus.provider);\n              const maticObj = new Matic({\n                maticProvider: web3.eth.currentProvider,\n                parentProvider: web3.eth.currentProvider\n              });\n              let accounts = await web3.eth.getAccounts();\n              window.maticObj = maticObj;\n              window.torus = torus;\n              window.web3 = web3;\n\n              if (accounts[0]) {\n                this.state.isLoggedIn = true;\n              }\n\n              window.account = accounts[0];\n              Router.pushRoute('/' + window.account);\n            } catch (error) {\n              console.log(\"Error \", error);\n            }\n          } else {\n            alert(\"Application not accessible\");\n          }\n        });\n      } else {\n        console.log(\"Wrong\");\n      }\n    });\n  }\n\n  async componentDidMount() {\n    t = require('@toruslabs/torus-embed').default;\n    console.log(t);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '1000px'\n      }\n    }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n      as: \"h1\",\n      icon: true,\n      textAlign: \"center\"\n    }, __jsx(Icon, {\n      name: \"file code\",\n      circular: true,\n      style: {\n        color: 'white'\n      }\n    }), __jsx(Header.Content, {\n      style: {\n        color: 'white'\n      }\n    }, \"EtherWills\")), __jsx(\"p\", {\n      style: {\n        fontSize: '2em',\n        color: 'white',\n        marginLeft: '12em',\n        marginRight: '4em',\n        marginTop: '4em'\n      },\n      textAlign: \"center\"\n    }, \"Please log in to create an EtherWill\")), __jsx(\"div\", {\n      style: {\n        marginTop: '125px'\n      }\n    }, __jsx(Segment, {\n      placeholder: true,\n      style: {\n        marginTop: 'auto',\n        backgroundColor: 'black'\n      }\n    }, __jsx(Grid, {\n      stackable: true,\n      textAlign: \"center\"\n    }, __jsx(Grid.Row, {\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, null, __jsx(Header, {\n      icon: true,\n      style: {\n        color: 'white'\n      }\n    }, __jsx(Icon, {\n      name: \"hand point down\"\n    })))), __jsx(Grid.Row, {\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, null, __jsx(Button, {\n      color: \"green\",\n      onClick: this.handleSubmit\n    }, \"Log In\"))))))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/nitin/Documents/github/EtherWills/pages/index.js"],"names":["React","Component","Button","Grid","Header","Icon","Segment","Layout","Router","Web3","Matic","t","Home","isLoggedin","account","balance","e","preventDefault","Notification","permission","requestPermission","then","torus","buttonPosition","init","buildEnv","enableLogging","network","host","showTorusButton","enabledVerifiers","facebook","reddit","twitch","discord","login","web3","provider","maticObj","maticProvider","eth","currentProvider","parentProvider","accounts","getAccounts","window","state","isLoggedIn","pushRoute","error","console","log","alert","componentDidMount","require","default","render","backgroundColor","height","color","fontSize","marginLeft","marginRight","marginTop","handleSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Grid, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport Layout from '../components/layouts/Layout';\r\nimport { Router } from './../routes';\r\nimport Web3 from 'web3';\r\nimport Matic from 'maticjs';\r\nlet t = ''\r\n\r\n\r\n\r\nclass Home extends Component {\r\n\t\r\n\tstate = {\r\n\t\tisLoggedin: false,\r\n\t\taccount: null,\r\n    \tbalance: ''\r\n\t}\r\n\tasync componentDidMount(){\r\n\t\tt = require('@toruslabs/torus-embed').default\r\n\t\tconsole.log(t)\r\n\t}\r\n\r\n\thandleSubmit = async e => {\r\n\t\te.preventDefault();\r\n\t\tif(Notification.permission!=='denied'){\r\n\t\t\tNotification.requestPermission().then( async (permission)=>{\r\n\t\t\t\tif(permission==='granted'){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst torus = new t({\r\n\t\t\t\t\t\t  buttonPosition: \"bottom-left\"\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tawait torus.init({\r\n\t\t\t\t\t\t  buildEnv: \"production\",\r\n\t\t\t\t\t\t  enableLogging: true,\r\n\t\t\t\t\t\t  network: {\r\n\t\t\t\t\t\t\thost: \"https://alpha.ethereum.matic.network/\"\r\n\t\t\t\t\t\t  },\r\n\t\t\t\t\t\t  showTorusButton: true,\r\n\t\t\t\t\t\t  enabledVerifiers: {\r\n\t\t\t\t\t\t\tfacebook: false,\r\n\t\t\t\t\t\t\treddit: false,\r\n\t\t\t\t\t\t\ttwitch: false,\r\n\t\t\t\t\t\t\tdiscord: false\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tawait torus.login();\r\n\t\t\t\t\t\tconst web3 = new Web3(torus.provider);\r\n\t\t\t\t\t\tconst maticObj = new Matic({\r\n\t\t\t\t\t\t  maticProvider: web3.eth.currentProvider,\r\n\t\t\t\t\t\t  parentProvider: web3.eth.currentProvider,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tlet accounts = await web3.eth.getAccounts();\r\n\t\t\t\t\t\twindow.maticObj = maticObj;\r\n\t\t\t\t\t\twindow.torus = torus;\r\n\t\t\t\t\t\twindow.web3 = web3;\r\n\t\t\t\t\t\tif (accounts[0]) {\r\n\t\t\t\t\t\t  this.state.isLoggedIn = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twindow.account=accounts[0];\r\n\t\t\t\t\t\tRouter.pushRoute('/'+window.account)\r\n\t\t\t\t\t  } catch (error) {\r\n\t\t\t\t\t\tconsole.log(\"Error \", error);\r\n\t\t\t\t\t  }\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\talert(\"Application not accessible\")\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconsole.log(\"Wrong\")\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t<Layout>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t<Icon name=\"file code\" circular style={{ color: 'white' }} />\r\n\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>EtherWills</Header.Content>\r\n\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t<p\r\n\t\t\t\t\t\t\tstyle={{ fontSize: '2em', color: 'white', marginLeft: '12em', marginRight: '4em', marginTop: '4em' }}\r\n\t\t\t\t\t\t\ttextAlign=\"center\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tPlease log in to create an EtherWill\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style={{ marginTop: '125px' }}>\r\n\t\t\t\t\t\t<Segment placeholder style={{ marginTop: 'auto', backgroundColor: 'black' }}>\r\n\t\t\t\t\t\t\t<Grid stackable textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Grid.Row verticalAlign=\"middle\">\r\n\t\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t\t<Header icon style={{ color: 'white' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon name=\"hand point down\" />\r\n\t\t\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t\t\t\t\t<Grid.Row verticalAlign=\"middle\">\r\n\t\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t\t<Button color=\"green\" onClick={this.handleSubmit}>Log In</Button>\r\n\t\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Segment>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Layout>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}