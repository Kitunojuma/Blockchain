{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layouts/Layout2';\nimport { Message, Button, Dimmer, Header, Icon, Form } from 'semantic-ui-react';\nimport ipfs from './../../ethereum/ipfs';\nimport { Link, Router } from '../../routes';\n\nvar _require = require('../EtherWills'),\n    ethwill = _require.ethwill;\n\nvar bs58 = require('bs58');\n\nvar executeWill =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(executeWill, _Component);\n\n  function executeWill() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, executeWill);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(executeWill)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      code: '',\n      permission: 'denied',\n      pk: '',\n      share: '',\n      loading: true,\n      executed: false,\n      account: '',\n      willDetail: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee(event) {\n      var etherwill, willDetails, hashHex, hashBytes, pk_base58, hashHex1, hashBytes1, s_base58, pk_json, s, pk;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ethwill(_this.props.willAddress));\n\n            case 3:\n              etherwill = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(etherwill.methods.executeWill(_this.state.code).send({\n                from: _this.state.account\n              }));\n\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(etherwill.methods.WillDetails().call({\n                from: _this.state.account\n              }));\n\n            case 8:\n              willDetails = _context.sent;\n              hashHex = \"1220\" + willDetails[0].slice(2);\n              hashBytes = Buffer.from(hashHex, 'hex');\n              pk_base58 = bs58.encode(hashBytes);\n              hashHex1 = \"1220\" + willDetails[1].slice(2);\n              hashBytes1 = Buffer.from(hashHex1, 'hex');\n              s_base58 = bs58.encode(hashBytes1);\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(ipfs.cat(pk_base58));\n\n            case 17:\n              pk_json = _context.sent;\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(ipfs.cat(s_base58));\n\n            case 20:\n              s = _context.sent;\n              pk = window.web3.eth.accounts.decrypt(JSON.parse(pk_json.toString()), s.toString());\n\n              _this.setState({\n                active: true\n              });\n\n              _this.setState({\n                pk: pk.privateKey.slice(2),\n                share: willDetails[2],\n                willDetail: true\n              });\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function _callee2(event) {\n      var etherwill, willDetails, hashHex, hashBytes, pk_base58, hashHex1, hashBytes1, s_base58, pk_json, s, pk;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(ethwill(_this.props.willAddress));\n\n            case 3:\n              etherwill = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(etherwill.methods.WillDetails().call({\n                from: _this.state.account\n              }));\n\n            case 6:\n              willDetails = _context2.sent;\n              console.log(\"L\");\n              hashHex = \"1220\" + willDetails[0].slice(2);\n              hashBytes = Buffer.from(hashHex, 'hex');\n              pk_base58 = bs58.encode(hashBytes);\n              hashHex1 = \"1220\" + willDetails[1].slice(2);\n              hashBytes1 = Buffer.from(hashHex1, 'hex');\n              s_base58 = bs58.encode(hashBytes1);\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(ipfs.cat(pk_base58));\n\n            case 16:\n              pk_json = _context2.sent;\n              _context2.next = 19;\n              return _regeneratorRuntime.awrap(ipfs.cat(s_base58));\n\n            case 19:\n              s = _context2.sent;\n              console.log(\"K\");\n              pk = window.web3.eth.accounts.decrypt(JSON.parse(pk_json.toString()), s.toString());\n              console.log(pk.privateKey.slice(2));\n\n              _this.setState({\n                pk: pk.privateKey.slice(2),\n                share: willDetails[2],\n                willDetail: true\n              });\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"Back\", function _callee3(event) {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault();\n              Router.pushRoute('/' + _this.state.account + '/role');\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(executeWill, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var etherwill, executable, executed;\n      return _regeneratorRuntime.async(function componentDidMount$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(ethwill(this.props.willAddress));\n\n            case 2:\n              etherwill = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(etherwill.methods.checkExecutable().call({\n                from: window.account\n              }));\n\n            case 5:\n              executable = _context4.sent;\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(etherwill.methods.executed().call({\n                from: window.account\n              }));\n\n            case 8:\n              executed = _context4.sent;\n              this.setState({\n                executed: executed,\n                account: window.account,\n                checkExecutable: executable,\n                loading: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"WillDetail\",\n    value: function WillDetail() {\n      if (this.state.willDetail === true) {\n        return __jsx(Message, {\n          positive: true,\n          style: {\n            marginTop: '15px'\n          }\n        }, __jsx(Message.Header, null, \"Private Key: \", this.state.pk), __jsx(Message.Header, null, \"Your Share In The Will: \", this.state.share));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.loading === false) {\n        if (this.state.checkExecutable === false) {\n          return __jsx(\"div\", {\n            style: {\n              backgroundColor: 'black',\n              height: '1000px'\n            }\n          }, __jsx(Layout, null, __jsx(Message, {\n            info: true\n          }, __jsx(Message.Header, null, \"Will not yet executable, please go back\")), __jsx(Button, {\n            primary: true,\n            type: \"button\",\n            onClick: this.Back\n          }, \"Back\")));\n        } else {\n          if (this.state.executed === false) {\n            return __jsx(\"div\", {\n              style: {\n                backgroundColor: 'black',\n                height: '1000px'\n              }\n            }, __jsx(Layout, null, __jsx(\"h2\", {\n              className: \"ui icon center aligned header\",\n              style: {\n                color: 'white',\n                marginBottom: '30px',\n                marginTop: '30px'\n              }\n            }, __jsx(\"i\", {\n              \"aria-hidden\": \"true\",\n              \"class\": \"file code icon\",\n              style: {\n                color: 'white'\n              }\n            }), \"Will Execution\"), __jsx(Message, {\n              positive: true\n            }, __jsx(Message.Header, null, \"Code for will:\"), __jsx(\"p\", null, __jsx(\"b\", null, this.props.willAddress), \" for execution.\")), __jsx(Form, {\n              onSubmit: this.onSubmit\n            }, __jsx(Form.Field, null, __jsx(\"input\", {\n              value: this.state.code,\n              onChange: function onChange(event) {\n                return _this2.setState({\n                  code: event.target.value\n                });\n              }\n            })), __jsx(Button, {\n              positive: true,\n              type: \"submit\",\n              value: \"Submit\",\n              content: \"Show\"\n            }, \"Execute Will\"), __jsx(Button, {\n              primary: true,\n              type: \"button\",\n              onClick: this.Back\n            }, \"Back\"), __jsx(\"div\", null, this.WillDetail()))));\n          } else {\n            return __jsx(\"div\", {\n              style: {\n                backgroundColor: 'black',\n                height: '1000px'\n              }\n            }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Button, {\n              positive: true,\n              type: \"button\",\n              onClick: this.onClick,\n              content: \"Show\"\n            }, \"Will Details\"), __jsx(Button, {\n              primary: true,\n              type: \"button\",\n              onClick: this.Back\n            }, \"Back\")), __jsx(\"div\", null, this.WillDetail())));\n          }\n        }\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            backgroundColor: 'black',\n            height: '1000px'\n          }\n        }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n          as: \"h1\",\n          icon: true,\n          textAlign: \"center\"\n        }, __jsx(Header.Content, {\n          style: {\n            color: 'white'\n          }\n        }, \"LOADING..\")))));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", {\n                willAddress: props.query.address\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return executeWill;\n}(Component);\n\nexport default executeWill;","map":{"version":3,"sources":["C:/Users/nitin/Documents/github/EtherWills/pages/will/executeWill.js"],"names":["React","Component","Layout","Message","Button","Dimmer","Header","Icon","Form","ipfs","Link","Router","require","ethwill","bs58","executeWill","code","permission","pk","share","loading","executed","account","willDetail","event","preventDefault","props","willAddress","etherwill","methods","state","send","from","WillDetails","call","willDetails","hashHex","slice","hashBytes","Buffer","pk_base58","encode","hashHex1","hashBytes1","s_base58","cat","pk_json","s","window","web3","eth","accounts","decrypt","JSON","parse","toString","setState","active","privateKey","console","log","pushRoute","checkExecutable","executable","marginTop","backgroundColor","height","Back","color","marginBottom","onSubmit","target","value","WillDetail","onClick","query","address"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../components/layouts/Layout2';\r\nimport { Message, Button, Dimmer, Header, Icon, Form } from 'semantic-ui-react';\r\nimport ipfs from './../../ethereum/ipfs';\r\nimport { Link, Router } from '../../routes';\r\nconst { ethwill } = require('../EtherWills');\r\nconst bs58 = require('bs58');\r\n\r\nclass executeWill extends Component {\r\n\tstatic async getInitialProps(props) {\r\n\t\treturn {\r\n\t\t\twillAddress: props.query.address,\r\n\t\t};\r\n\t}\r\n\r\n\tstate = {\r\n\t\tcode: '',\r\n\t\tpermission: 'denied',\r\n\t\tpk: '',\r\n\t\tshare: '',\r\n\t\tloading: true,\r\n\t\texecuted: false,\r\n\t\taccount:'',\r\n\t\twillDetail: false\r\n\t};\r\n\r\n\tasync componentDidMount(){\r\n\t\tlet etherwill = await ethwill(this.props.willAddress);\r\n\t\tconst executable = await etherwill.methods.checkExecutable().call({ from: window.account });\r\n\t\tlet executed = await etherwill.methods.executed().call({from: window.account})\r\n\t\tthis.setState({\r\n\t\t\texecuted: executed,\r\n\t\t\taccount: window.account,\r\n\t\t\tcheckExecutable: executable,\r\n\t\t\tloading: false\r\n\t\t});\r\n\t}\r\n\r\n\t\r\n\r\n\tonSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tlet etherwill = await ethwill(this.props.willAddress);\r\n\t\tawait etherwill.methods.executeWill(this.state.code).send({ from: this.state.account });\r\n\t\tlet willDetails = await etherwill.methods.WillDetails().call({ from: this.state.account });\r\n\t\tconst hashHex = \"1220\" + willDetails[0].slice(2)\r\n  \t\tconst hashBytes = Buffer.from(hashHex, 'hex');\r\n\t\tconst pk_base58 = bs58.encode(hashBytes)\r\n\t\tconst hashHex1 = \"1220\" + willDetails[1].slice(2)\r\n  \t\tconst hashBytes1 = Buffer.from(hashHex1, 'hex');\r\n\t\tconst s_base58 = bs58.encode(hashBytes1)\r\n\t\tconst pk_json = await ipfs.cat(pk_base58)\r\n\t\tconst s = await ipfs.cat(s_base58)\r\n\t\tlet pk = window.web3.eth.accounts.decrypt(JSON.parse(pk_json.toString()),s.toString())\r\n\t\tthis.setState({ active: true });\r\n\t\tthis.setState({\r\n\t\t\tpk: pk.privateKey.slice(2),\r\n\t\t\tshare: willDetails[2],\r\n\t\t\twillDetail: true\r\n\t\t})\r\n\t};\r\n\r\n\tonClick = async (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tlet etherwill = await ethwill(this.props.willAddress);\r\n\t\tlet willDetails = await etherwill.methods.WillDetails().call({ from: this.state.account });\r\n\t\tconsole.log(\"L\")\r\n\t\tconst hashHex = \"1220\" + willDetails[0].slice(2)\r\n  \t\tconst hashBytes = Buffer.from(hashHex, 'hex');\r\n\t\tconst pk_base58 = bs58.encode(hashBytes)\r\n\t\tconst hashHex1 = \"1220\" + willDetails[1].slice(2)\r\n  \t\tconst hashBytes1 = Buffer.from(hashHex1, 'hex');\r\n\t\tconst s_base58 = bs58.encode(hashBytes1)\r\n\t\tconst pk_json = await ipfs.cat(pk_base58)\r\n\t\tconst s = await ipfs.cat(s_base58)\r\n\t\tconsole.log(\"K\")\r\n\t\tlet pk = window.web3.eth.accounts.decrypt(JSON.parse(pk_json.toString()),s.toString())\r\n\t\tconsole.log(pk.privateKey.slice(2))\r\n\t\tthis.setState({\r\n\t\t\tpk: pk.privateKey.slice(2),\r\n\t\t\tshare: willDetails[2],\r\n\t\t\twillDetail: true\r\n\t\t})\r\n\t}\r\n\r\n\tWillDetail () {\r\n\t\tif(this.state.willDetail===true){\r\n\t\t\treturn(\r\n\t\t\t\t<Message positive style = {{marginTop: '15px'}}>\r\n\t\t\t\t\t<Message.Header>Private Key: {this.state.pk}</Message.Header>\r\n\t\t\t\t\t<Message.Header>Your Share In The Will: {this.state.share}</Message.Header>\r\n\t\t\t \t</Message>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tBack = async event => {\r\n\t\tevent.preventDefault()\r\n\t\tRouter.pushRoute('/'+this.state.account+'/role') \r\n\t}\r\n\trender() {\r\n\t\tif(this.state.loading===false){\r\n\t\t\tif (this.state.checkExecutable === false) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t\t<Message info>\r\n\t\t\t\t\t\t\t\t<Message.Header>Will not yet executable, please go back</Message.Header>\r\n\t\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t\t\t<Button primary type=\"button\" onClick={this.Back}>\r\n\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Layout>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tif(this.state.executed===false){\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t\t\t<h2\r\n\t\t\t\t\t\t\t\t\tclassName=\"ui icon center aligned header\"\r\n\t\t\t\t\t\t\t\t\tstyle={{ color: 'white', marginBottom: '30px', marginTop: '30px' }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<i aria-hidden=\"true\" class=\"file code icon\" style={{ color: 'white' }} />\r\n\t\t\t\t\t\t\t\t\tWill Execution\r\n\t\t\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t\t\t<Message positive>\r\n\t\t\t\t\t\t\t\t\t<Message.Header>Code for will:</Message.Header>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t<b>{this.props.willAddress}</b> for execution.\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t\t\t\t<Form onSubmit={this.onSubmit}>\r\n\t\t\t\t\t\t\t\t\t<Form.Field>\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.code}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => this.setState({ code: event.target.value })}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Form.Field>\r\n\t\t\t\t\t\t\t\t\t<Button positive type=\"submit\" value=\"Submit\" content=\"Show\">\r\n\t\t\t\t\t\t\t\t\t\tExecute Will\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button primary type=\"button\" onClick={this.Back}>\r\n\t\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<div>{this.WillDetail()}</div>\r\n\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t</Layout>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Button positive type=\"button\" onClick= {this.onClick} content=\"Show\">\r\n\t\t\t\t\t\t\t\t\t\tWill Details\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button primary type=\"button\" onClick={this.Back}>\r\n\t\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div>{this.WillDetail()}</div>\r\n\t\t\t\t\t\t\t</Layout>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>LOADING..</Header.Content>\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default executeWill;\r\n"]},"metadata":{},"sourceType":"module"}