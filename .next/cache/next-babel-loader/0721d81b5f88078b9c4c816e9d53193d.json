{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/layouts/Layout2';\nimport { Button, Item, Table, Header } from 'semantic-ui-react';\n\nconst {\n  ethwill\n} = require('../EtherWills');\n\nconst {\n  wills\n} = require('../wills');\n\nimport { Link, Router } from '../../routes';\n\nclass YourRole extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      willAddress: '',\n      addressBenefArray: [],\n      loading: true\n    });\n\n    _defineProperty(this, \"submit\", async event => {\n      event.preventDefault();\n      let address = event.target.value;\n      const etherwill = await ethwill(address);\n      let bool = await etherwill.methods.checkExecutable().call({\n        from: window.account\n      });\n\n      if (bool == true) {\n        let code = await etherwill.methods.getCode().call({\n          from: window.account\n        });\n        alert(`Executable code is ${code}`);\n      } else {\n        alert('The will is not yet executable');\n      }\n    });\n\n    _defineProperty(this, \"executeWill\", async event => {\n      Router.pushRoute(`/${window.account}/executeWill/${event.target.value}`);\n    });\n\n    _defineProperty(this, \"Back\", async event => {\n      event.preventDefault();\n      Router.pushRoute('/' + window.account);\n    });\n  }\n\n  async componentDidMount() {\n    const will = await wills();\n    const willAddress = await will.methods.getTestor(window.account).call({\n      from: window.account\n    });\n    const beneficiary_contracts = await will.methods.numberOfWillsAsBeneficiary().call({\n      from: window.account\n    });\n    let addressBenefArray = [];\n    let willAddressAsBenef;\n\n    for (let i = 0; i < beneficiary_contracts; i++) {\n      willAddressAsBenef = await will.methods.getBeneficiary(window.account, i).call({\n        from: window.account\n      });\n      let has_selfdestructed = await will.methods.getWillExistence(willAddressAsBenef).call({\n        from: window.account\n      });\n\n      if (has_selfdestructed === false) {\n        addressBenefArray.push(willAddressAsBenef);\n      }\n    }\n\n    console.log(addressBenefArray);\n    this.setState({\n      willAddress\n    });\n    this.setState({\n      addressBenefArray\n    });\n    this.setState({\n      loading: false\n    });\n  }\n\n  renderTestor() {\n    let a = this.state.willAddress;\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body,\n      Cell\n    } = Table;\n\n    if (a != '0x0000000000000000000000000000000000000000') {\n      let a = this.state.willAddress;\n      return __jsx(\"div\", null, __jsx(Header, {\n        as: \"h3\",\n        block: true,\n        style: {\n          color: 'white'\n        }\n      }, \"As A Testor\"), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Will Address\"), __jsx(HeaderCell, null, \"Role\"), __jsx(HeaderCell, null, \"Description\"))), __jsx(Body, null, __jsx(Row, null, __jsx(Cell, null, a), __jsx(Cell, null, \"Testor\"), __jsx(Cell, null, \"For a given will address you are acting as a Testor\")))));\n    } else {\n      return __jsx(\"div\", null, __jsx(Header, {\n        as: \"h3\",\n        block: true,\n        style: {\n          color: 'white'\n        }\n      }, \"As A Testor\"), __jsx(Link, {\n        route: `/${window.account}/new`\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true\n      }, \"Create A Will First\"))));\n    }\n  }\n\n  renderBeneficiary() {\n    if (this.state.addressBenefArray.length == 0) {\n      return __jsx(\"div\", {\n        style: {\n          marginTop: '30px'\n        }\n      }, __jsx(Header, {\n        as: \"h3\",\n        block: true\n      }, \"You Are Not A Beneficiary Of Any Will\"));\n    }\n  }\n\n  render() {\n    if (this.state.loading === false) {\n      const {\n        Header,\n        Row,\n        HeaderCell,\n        Body,\n        Cell\n      } = Table;\n      return __jsx(\"div\", {\n        style: {\n          backgroundColor: 'black',\n          height: '1000px'\n        }\n      }, __jsx(Layout, null, __jsx(\"h2\", {\n        className: \"ui icon center aligned header\",\n        style: {\n          color: 'white'\n        }\n      }, __jsx(\"i\", {\n        \"aria-hidden\": \"true\",\n        class: \"file code icon\",\n        style: {\n          color: 'white'\n        }\n      }), \"Your Role In Different Wills\"), __jsx(Button, {\n        primary: true,\n        type: \"button\",\n        onClick: this.Back,\n        style: {\n          marginTop: '30px',\n          marginBottom: '15px'\n        }\n      }, \"Back\"), __jsx(\"div\", null, this.renderTestor()), __jsx(\"div\", null, __jsx(Header, {\n        as: \"h3\",\n        block: true,\n        style: {\n          marginTop: '30px',\n          color: 'white',\n          marginBottom: '30px'\n        }\n      }, \"As A Beneficiary\")), __jsx(\"div\", null, this.renderBeneficiary()), this.state.addressBenefArray.map(address => {\n        return __jsx(\"div\", null, __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"Will Address\"), __jsx(HeaderCell, null, \"Role\"), __jsx(HeaderCell, null, \"Description\"))), __jsx(Body, null, __jsx(Row, null, __jsx(Cell, null, address), __jsx(Cell, null, \"Beneficiary\"), __jsx(Cell, null, \"For a given will address you are acting as a Beneficiary\"), __jsx(Cell, null, __jsx(Button, {\n          basic: true,\n          color: \"yellow\",\n          value: address,\n          onClick: this.submit\n        }, \"Check Executable\")), __jsx(Cell, null, __jsx(Button, {\n          basic: true,\n          color: \"green\",\n          value: address,\n          onClick: this.executeWill\n        }, \"Execute Will\"))))));\n      })));\n    } else {\n      return __jsx(\"div\", {\n        style: {\n          backgroundColor: 'black',\n          height: '1000px'\n        }\n      }, __jsx(Layout, null, __jsx(\"div\", null, __jsx(Header, {\n        as: \"h1\",\n        icon: true,\n        textAlign: \"center\"\n      }, __jsx(Header.Content, {\n        style: {\n          color: 'white'\n        }\n      }, \"LOADING..\")))));\n    }\n  }\n\n}\n\nexport default YourRole;","map":{"version":3,"sources":["C:/Users/nitin/Documents/github/EtherWills/pages/will/role.js"],"names":["React","Component","Layout","Button","Item","Table","Header","ethwill","require","wills","Link","Router","YourRole","willAddress","addressBenefArray","loading","event","preventDefault","address","target","value","etherwill","bool","methods","checkExecutable","call","from","window","account","code","getCode","alert","pushRoute","componentDidMount","will","getTestor","beneficiary_contracts","numberOfWillsAsBeneficiary","willAddressAsBenef","i","getBeneficiary","has_selfdestructed","getWillExistence","push","console","log","setState","renderTestor","a","state","Row","HeaderCell","Body","Cell","color","renderBeneficiary","length","marginTop","render","backgroundColor","height","Back","marginBottom","map","submit","executeWill"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../components/layouts/Layout2';\r\nimport { Button, Item, Table, Header } from 'semantic-ui-react';\r\nconst { ethwill } = require('../EtherWills');\r\nconst { wills } = require('../wills');\r\nimport { Link, Router } from '../../routes';\r\n\r\nclass YourRole extends Component {\r\n\tstate = {\r\n\t\twillAddress: '',\r\n\t\taddressBenefArray: [],\r\n\t\tloading: true\r\n\t};\r\n\tasync componentDidMount() {\r\n\t\tconst will = await wills();\r\n\r\n\t\tconst willAddress = await will.methods.getTestor(window.account).call({ from: window.account });\r\n\t\tconst beneficiary_contracts = await will.methods.numberOfWillsAsBeneficiary().call({ from: window.account });\r\n\r\n\t\tlet addressBenefArray = [];\r\n\t\tlet willAddressAsBenef;\r\n\t\tfor (let i = 0; i < beneficiary_contracts; i++) {\r\n\t\t\twillAddressAsBenef = await will.methods.getBeneficiary(window.account, i).call({ from: window.account });\r\n\t\t\tlet has_selfdestructed = await will.methods.getWillExistence(willAddressAsBenef).call({ from: window.account });\r\n\t\t\tif(has_selfdestructed===false){\r\n\t\t\t\taddressBenefArray.push(willAddressAsBenef);\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tconsole.log(addressBenefArray);\r\n\t\tthis.setState({ willAddress });\r\n\t\tthis.setState({ addressBenefArray });\r\n\t\tthis.setState({ loading: false })\r\n\t}\r\n\tsubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tlet address = event.target.value\r\n\t\tconst etherwill = await ethwill(address);\r\n\t\tlet bool = await etherwill.methods.checkExecutable().call({ from: window.account });\r\n\t\tif (bool == true) {\r\n\t\t\tlet code = await etherwill.methods.getCode().call({ from: window.account });\r\n\t\t\talert(`Executable code is ${code}`);\r\n\t\t} else {\r\n\t\t\talert('The will is not yet executable');\r\n\t\t}\r\n\t};\r\n\r\n\texecuteWill = async (event) => {\r\n\t\tRouter.pushRoute(`/${window.account}/executeWill/${event.target.value}`);\r\n\t};\r\n\r\n\tBack = async event => {\r\n\t\tevent.preventDefault()\r\n\t\tRouter.pushRoute('/'+window.account) \r\n\t}\r\n\r\n\trenderTestor() {\r\n\t\tlet a = this.state.willAddress;\r\n\t\tconst { Header, Row, HeaderCell, Body, Cell } = Table;\r\n\t\tif (a != '0x0000000000000000000000000000000000000000') {\r\n\t\t\tlet a = this.state.willAddress;\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ color: 'white' }}>\r\n\t\t\t\t\t\tAs A Testor\r\n\t\t\t\t\t</Header>\r\n\r\n\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Will Address</HeaderCell>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Role</HeaderCell>\r\n\t\t\t\t\t\t\t\t<HeaderCell>Description</HeaderCell>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t<Body>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Cell>{a}</Cell>\r\n\t\t\t\t\t\t\t\t<Cell>Testor</Cell>\r\n\t\t\t\t\t\t\t\t<Cell>For a given will address you are acting as a Testor</Cell>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Body>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ color: 'white' }}>\r\n\t\t\t\t\t\tAs A Testor\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t\t<Link route={`/${window.account}/new`}>\r\n\t\t\t\t\t\t<a>\r\n\t\t\t\t\t\t\t<Button primary>Create A Will First</Button>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trenderBeneficiary() {\r\n\t\tif (this.state.addressBenefArray.length == 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ marginTop: '30px' }}>\r\n\t\t\t\t<Header as=\"h3\" block >\r\n\t\t\t\t\tYou Are Not A Beneficiary Of Any Will\r\n\t\t\t\t</Header>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.loading === false){\r\n\t\t\tconst { Header, Row, HeaderCell, Body, Cell } = Table;\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t<Layout>\r\n\t\t\t\t<h2 className=\"ui icon center aligned header\" style={{ color: 'white' }}>\r\n\t\t\t\t\t<i aria-hidden=\"true\" class=\"file code icon\" style={{ color: 'white' }} />\r\n\t\t\t\t\tYour Role In Different Wills\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Button primary type=\"button\" onClick={this.Back} style = {{marginTop: '30px',marginBottom: '15px'}}>\r\n\t\t\t\t\t\t\tBack\r\n\t\t\t\t</Button>\r\n\t\t\t\t<div>{this.renderTestor()}</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header as=\"h3\" block style={{ marginTop: '30px', color: 'white' , marginBottom: '30px'}}>\r\n\t\t\t\t\t\tAs A Beneficiary\r\n\t\t\t\t\t</Header>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>{this.renderBeneficiary()}</div>\r\n\t\t\t\t{this.state.addressBenefArray.map((address) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t\t\t<Header>\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Will Address</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Role</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t\t<HeaderCell>Description</HeaderCell>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t\t<Body>\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>{address}</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>Beneficiary</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>For a given will address you are acting as a Beneficiary</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button basic color=\"yellow\" value={address} onClick={this.submit}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tCheck Executable\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Cell>\r\n\t\t\t\t\t\t\t\t\t\t<Cell>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button basic color=\"green\" value={address} onClick={this.executeWill}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tExecute Will\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Cell>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t</Body>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</Layout>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{ backgroundColor: 'black', height: '1000px' }}>\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Header as=\"h1\" icon textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t<Header.Content style={{ color: 'white' }}>LOADING..</Header.Content>\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default YourRole;"]},"metadata":{},"sourceType":"module"}